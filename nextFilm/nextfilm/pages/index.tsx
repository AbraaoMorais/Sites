import type { NextPage } from 'next'
import React, { FormEvent, useEffect, useState } from 'react'
import { useRouter } from 'next/router'
import { args } from '../config/api'
import Head from 'next/head'
import Image from 'next/image'
import PaginationComponent from './components/pagination'
import styles from '../styles/Home.module.css'

interface IPropsComponent{
  list: any[]
  page: number
  total_pages: number
  search: boolean
  searchParam: string
}

const Home = ({list,page,total_pages,searchParam}:IPropsComponent) => {

  //armazena lista de filmes api
  const [data, setData] = useState<any[]>([]);
  const router = useRouter();
  //armazena valor de search input
  const [search, setSearch] = useState(searchParam)

  //armazena valor da prop searchParam
  const [result, setResult] = useState<undefined|string>("")

  const handleChange = (event: React.ChangeEvent<unknown>,value: number) =>{
    if(search){
      //redirecioa para page passando os parametros search e value
      return router.push(`?search=${search}&page=${value}`)
    }else{
      return router.push(`?search=${value}`)
    }
  }
  async function handleSearchMovie(e:FormEvent<HTMLFormElement>){
      e.preventDefault();
      return router.push(`?search=${search}&page=1`)
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.formSearch}>
          <form onSubmit={handleSearchMovie}>
            <input type="text" placeholder='procure o filme' onChange={(e)=>setSearch(e.target.value)}/>
            <button type='submit'>pesquisar</button>
          </form>
        </div>
        <div>
          {result ? (<h1>Resultado da busca para :{`${result}`}</h1>): (<h1>Filmes populares</h1>)}
        </div>
        <div>
          {data.map((item: any, index: number)=>(
            <div key={index}>
              <Image
                src={`http://image.tmdb.org/t/p/original${item.post_path}`}
                alt="alguma coisa"
                width={350}
                height={400}
              />
              <div>
                {item.vote_average ? ( <p> Nota: <span>{item.vote_average}</span></p>) : (<span>Sem avaliação</span>)}
              </div>
            </div>
          ))}
        </div>
        <div>
          <PaginationComponent
            total_pages={total_pages}
            page={page}
            handleChange={handleChange}
          />
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home


export async function getServerSideProps({query}:{
  query:{
    page?:string
    search?:string
  }
}){
  if(query.search){
    const res = await fetch(`${args.base_url}/movie?api_key=${args.api_key}&query=${query.search}&page=${query.page ? query.page: 1}&language=pt-BR`)
    const {results, page, total_pages} = (await res.json()) as any
    return {
      props: {
        list: results,
        page,
        total_pages,
        searchParam: query.search 
      }
    }
  }else{
    const res = await fetch(`${args.base_url}/trending/movie/week?api_key=${args.api_key}&page=${query.page ? query.page : 1}&language=pt-BR`)
    const {results, page, total_pages} = (await res.json()) as any
    return {
      props:{
        list: results,
        page: page,
        total_pages: total_pages,
        searchParams: ""
      }
    }
  }
}